import json
import os
import requests
import re
from openai import OpenAI
from rss_reader import load_sources, parse_feed
from rewrite import rewrite_news
from telegram_sender import send_telegram_message_with_photo, send_telegram_message_without_photo

TELEGRAM_TOKEN = os.getenv("TG_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TG_CHAT_ID")
UNSPLASH_ACCESS_KEY = "7UmMOEVE5pNZxC6Mu1R6ZXvpbOyuAKL41-yUfrtoMdQ"

print("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API: deepseek/deepseek-r1-0528-qwen3-8b:free")

SENT_LOG = "sent_log.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
if os.path.exists(SENT_LOG):
    with open(SENT_LOG, "r") as f:
        sent_links = set(json.load(f))
else:
    sent_links = set()

print(f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_links)} —Å—Å—ã–ª–æ–∫ –∏–∑ –ª–æ–≥–∞")

def save_log():
    print(f"üìè –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(sent_links)} —Å—Å—ã–ª–æ–∫ –≤ {SENT_LOG}")
    with open(SENT_LOG, "w") as f:
        json.dump(list(sent_links), f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å RSS-–ª–µ–Ω—Ç—ã
def fetch_news(url: str):
    entries, _ = parse_feed(url)
    items = []
    for e in entries:
        item = {"title": e.title or "", "summary": e.summary_html or "", "link": e.link or ""}
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        image = None
        if "<img" in e.summary_html:
            m = re.search(r'<img[^>]+src="([^"]+)"', e.summary_html)
            if m:
                image = m.group(1)
        if image:
            item["image"] = image
        items.append(item)
    return items

# üí° –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ —Å Unsplash
def get_unsplash_image_url(query):
    url = "https://api.unsplash.com/search/photos"
    params = {
        "query": query,
        "orientation": "landscape",
        "per_page": 1,
        "client_id": UNSPLASH_ACCESS_KEY,
    }
    try:
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()
        if data["results"]:
            return data["results"][0]["urls"]["regular"]
        else:
            print("‚ö†Ô∏è Unsplash: –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return None
    except Exception as e:
        print(f"‚ùå Unsplash API error: {e}")
        return None

# üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ —Å—Ç–∞—Ç—å–∏
client = OpenAI(
    api_key=os.getenv("OPENROUTER_API_KEY"),
    base_url="https://openrouter.ai/api/v1"
)

def extract_image_topic(title, summary):
    prompt = f"""
–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞–≤—Ç–æ–∂—É—Ä–Ω–∞–ª–∞. –í–µ—Ä–Ω–∏ –æ–¥–∏–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–≥ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ),
–∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ Unsplash.
–ü–æ–¥–æ–π–¥—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: rally, drift, wrc, racing, motorsport, offroad, podium, 
servicepark, pitstop, supercar, burnout.

–ü—Ä–∞–≤–∏–ª–∞:
‚Äî –¢–æ–ª—å–∫–æ 1 –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
‚Äî –ë–µ–∑ —Ç–æ—á–µ–∫, –∫–∞–≤—ã—á–µ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–ó–∞–≥–æ–ª–æ–≤–æ–∫:
{title}

–û–ø–∏—Å–∞–Ω–∏–µ:
{summary}
"""
    try:
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528-qwen3-8b:free",
            messages=[{
                "role": "user",
                "content": [{"type": "text", "text": prompt}]
            }],
            extra_headers={
                "HTTP-Referer": "https://t.me/FuturePulse",
                "X-Title": "FuturePulse Topic"
            },
            extra_body={}
        )
        topic = response.choices[0].message.content.strip().lower()
        if " " in topic or not topic.isascii():
            return None
        return topic
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ extract_image_topic: {e}")
        return None

# üß¨ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
def main():
    for url in load_sources():
        for item in fetch_news(url):
            if item["link"] in sent_links:
                print(f"üõë –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—å): {item['link']}")
                continue

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
                headline, body = rewrite_news(item["title"], item["summary"])

                # –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = item.get("image")
                if not image_url:
                    topic = extract_image_topic(item["title"], item["summary"])
                    if topic:
                        image_url = get_unsplash_image_url(topic)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                if image_url:
                    send_telegram_message_with_photo(
                        title=headline,
                        link=item["link"],
                        text=body,
                        image_url=image_url,
                        token=TELEGRAM_TOKEN,
                        chat_id=TELEGRAM_CHAT_ID
                    )
                else:
                    send_telegram_message_without_photo(
                        title=headline,
                        link=item["link"],
                        text=body,
                        token=TELEGRAM_TOKEN,
                        chat_id=TELEGRAM_CHAT_ID
                    )

                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item['link']}")
                sent_links.add(item["link"])

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {item['link']}: {e}")

    save_log()

if __name__ == "__main__":
    main()
